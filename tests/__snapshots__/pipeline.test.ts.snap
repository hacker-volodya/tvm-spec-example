// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`defaultPipeline snapshot does not inline producer if its value is part of result 1`] = `
{
  "args": [],
  "body": [
    {
      "inputs": [],
      "kind": "prim",
      "mnemonic": "PUSHCONST",
      "operands": [],
      "outputs": [
        {
          "name": "v",
          "value": {
            "id": "vres",
          },
        },
      ],
      "spec": {
        "bytecode": {
          "operands": [],
          "prefix": "00",
          "tlb": "",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "const_int",
          "description": "",
          "fift": "",
          "fift_examples": [],
          "gas": "",
          "opcode": "",
          "stack": "",
        },
        "mnemonic": "FAKE",
        "since_version": 9999,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
    },
    {
      "inputs": [
        {
          "name": "a",
          "value": {
            "kind": "inline",
            "op": {
              "inputs": [],
              "kind": "prim",
              "mnemonic": "PUSHCONST",
              "operands": [],
              "outputs": [
                {
                  "name": "v",
                  "value": {
                    "id": "vres",
                  },
                },
              ],
              "spec": {
                "bytecode": {
                  "operands": [],
                  "prefix": "00",
                  "tlb": "",
                },
                "control_flow": {
                  "branches": [],
                  "nobranch": true,
                },
                "doc": {
                  "category": "const_int",
                  "description": "",
                  "fift": "",
                  "fift_examples": [],
                  "gas": "",
                  "opcode": "",
                  "stack": "",
                },
                "mnemonic": "FAKE",
                "since_version": 9999,
                "value_flow": {
                  "inputs": {
                    "registers": [],
                  },
                  "outputs": {
                    "registers": [],
                  },
                },
              },
            },
          },
        },
      ],
      "kind": "prim",
      "mnemonic": "USE",
      "operands": [],
      "outputs": [
        {
          "name": "y",
          "value": {
            "id": "y",
          },
        },
      ],
      "spec": {
        "bytecode": {
          "operands": [],
          "prefix": "00",
          "tlb": "",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "misc",
          "description": "",
          "fift": "",
          "fift_examples": [],
          "gas": "",
          "opcode": "",
          "stack": "",
        },
        "mnemonic": "FAKE",
        "since_version": 9999,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
    },
  ],
  "kind": "function",
  "result": [
    {
      "id": "vres",
    },
    {
      "id": "y",
    },
  ],
}
`;

exports[`defaultPipeline snapshot inlines previous single-use non-const op 1`] = `
{
  "args": [
    {
      "id": "arg0",
    },
  ],
  "body": [
    {
      "inputs": [
        {
          "name": "x",
          "value": {
            "kind": "inline",
            "op": {
              "inputs": [
                {
                  "name": "a",
                  "value": {
                    "id": "arg0",
                  },
                },
              ],
              "kind": "prim",
              "mnemonic": "SHL",
              "operands": [],
              "outputs": [
                {
                  "name": "t",
                  "value": {
                    "id": "t",
                  },
                },
              ],
              "spec": {
                "bytecode": {
                  "operands": [],
                  "prefix": "00",
                  "tlb": "",
                },
                "control_flow": {
                  "branches": [],
                  "nobranch": true,
                },
                "doc": {
                  "category": "misc",
                  "description": "",
                  "fift": "",
                  "fift_examples": [],
                  "gas": "",
                  "opcode": "",
                  "stack": "",
                },
                "mnemonic": "FAKE",
                "since_version": 9999,
                "value_flow": {
                  "inputs": {
                    "registers": [],
                  },
                  "outputs": {
                    "registers": [],
                  },
                },
              },
            },
          },
        },
      ],
      "kind": "prim",
      "mnemonic": "NEGATE",
      "operands": [],
      "outputs": [
        {
          "name": "y",
          "value": {
            "id": "y",
          },
        },
      ],
      "spec": {
        "bytecode": {
          "operands": [],
          "prefix": "00",
          "tlb": "",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "misc",
          "description": "",
          "fift": "",
          "fift_examples": [],
          "gas": "",
          "opcode": "",
          "stack": "",
        },
        "mnemonic": "FAKE",
        "since_version": 9999,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
    },
  ],
  "kind": "function",
  "result": [
    {
      "id": "y",
    },
  ],
}
`;

exports[`defaultPipeline snapshot inlines single-use const producer into consumer 1`] = `
{
  "args": [
    {
      "id": "arg0",
    },
  ],
  "body": [
    {
      "inputs": [
        {
          "name": "v",
          "value": {
            "kind": "inline",
            "op": {
              "inputs": [],
              "kind": "prim",
              "mnemonic": "PUSHCONST",
              "operands": [],
              "outputs": [
                {
                  "name": "v",
                  "value": {
                    "id": "v1",
                  },
                },
              ],
              "spec": {
                "bytecode": {
                  "operands": [],
                  "prefix": "00",
                  "tlb": "",
                },
                "control_flow": {
                  "branches": [],
                  "nobranch": true,
                },
                "doc": {
                  "category": "const_int",
                  "description": "",
                  "fift": "",
                  "fift_examples": [],
                  "gas": "",
                  "opcode": "",
                  "stack": "",
                },
                "mnemonic": "FAKE",
                "since_version": 9999,
                "value_flow": {
                  "inputs": {
                    "registers": [],
                  },
                  "outputs": {
                    "registers": [],
                  },
                },
              },
            },
          },
        },
      ],
      "kind": "prim",
      "mnemonic": "SIDEEFFECTS",
      "operands": [],
      "outputs": [],
      "spec": {
        "bytecode": {
          "operands": [],
          "prefix": "00",
          "tlb": "",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "misc",
          "description": "",
          "fift": "",
          "fift_examples": [],
          "gas": "",
          "opcode": "",
          "stack": "",
        },
        "mnemonic": "FAKE",
        "since_version": 9999,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
    },
    {
      "inputs": [
        {
          "name": "a",
          "value": {
            "kind": "inline",
            "op": {
              "inputs": [],
              "kind": "prim",
              "mnemonic": "PUSHCONST",
              "operands": [],
              "outputs": [
                {
                  "name": "v",
                  "value": {
                    "id": "v1",
                  },
                },
              ],
              "spec": {
                "bytecode": {
                  "operands": [],
                  "prefix": "00",
                  "tlb": "",
                },
                "control_flow": {
                  "branches": [],
                  "nobranch": true,
                },
                "doc": {
                  "category": "const_int",
                  "description": "",
                  "fift": "",
                  "fift_examples": [],
                  "gas": "",
                  "opcode": "",
                  "stack": "",
                },
                "mnemonic": "FAKE",
                "since_version": 9999,
                "value_flow": {
                  "inputs": {
                    "registers": [],
                  },
                  "outputs": {
                    "registers": [],
                  },
                },
              },
            },
          },
        },
        {
          "name": "b",
          "value": {
            "id": "arg0",
          },
        },
      ],
      "kind": "prim",
      "mnemonic": "ADD",
      "operands": [],
      "outputs": [
        {
          "name": "y",
          "value": {
            "id": "y1",
          },
        },
      ],
      "spec": {
        "bytecode": {
          "operands": [],
          "prefix": "00",
          "tlb": "",
        },
        "control_flow": {
          "branches": [],
          "nobranch": true,
        },
        "doc": {
          "category": "misc",
          "description": "",
          "fift": "",
          "fift_examples": [],
          "gas": "",
          "opcode": "",
          "stack": "",
        },
        "mnemonic": "FAKE",
        "since_version": 9999,
        "value_flow": {
          "inputs": {
            "registers": [],
          },
          "outputs": {
            "registers": [],
          },
        },
      },
    },
  ],
  "kind": "function",
  "result": [
    {
      "id": "y1",
    },
  ],
}
`;
